apiVersion: v1
kind: ConfigMap
metadata:
  name: init-db-script
  namespace: otus-anton
data:
  init.sql: |
    create schema if not exists "auth";

    create table if not exists "auth"."Users"(
      "Id" UUID primary key,
      "FirstName" character varying,
      "LastName" character varying,
      "Email" character varying,
      "Password" character varying,
      "Roles" character varying,
      CONSTRAINT USER_EMAIL_UNIQUE UNIQUE ("Email")
    );

    GRANT TRIGGER, DELETE, SELECT, INSERT, TRUNCATE, UPDATE, REFERENCES ON TABLE "auth"."Users" TO my_user;  

    create schema if not exists "profile";

    create table if not exists "profile"."Profiles"(
      "UserId" UUID primary key,
      "Age" int,
      "Sex" character varying,
      "AvatarUri" character varying
    );

    GRANT TRIGGER, DELETE, SELECT, INSERT, TRUNCATE, UPDATE, REFERENCES ON TABLE profile.Profile TO my_user;  

    create schema if not exists "order";

    create table if not exists "order"."Orders"(
      "Number" serial primary key,
      "UserId" UUID not null,
      "CreatedAt" timestamp not null,
      "UpdatedAt" timestamp,
      "Sum" decimal(12,2) not null,
      "Status" character varying,
      "Name" character varying,
      "ProductCode" character varying,
      "ProductName" character varying,
      "Quantity" bigint,
      "DeliveryDate" date,
      "Address" character varying
    );

    GRANT TRIGGER, DELETE, SELECT, INSERT, TRUNCATE, UPDATE, REFERENCES ON TABLE "order"."Orders" TO my_user;  

    create schema if not exists "notif";
    
    create table if not exists "notif"."Notifications"(
      "Id" UUID primary key,
      "Timestamp" timestamp not null,
      "UserId" UUID not null,
      "OrderNumber" bigint,
      "Text" character varying,
      "IsRead" bool default false
    );

    GRANT TRIGGER, DELETE, SELECT, INSERT, TRUNCATE, UPDATE, REFERENCES ON TABLE "notif"."Notifications" TO my_user;

    create schema if not exists "billing";
    
    create table if not exists billing.Wallet(
      "UserId" UUID primary key,
      "Balance" decimal(12,2) not null default 0.0
    );

    GRANT TRIGGER, DELETE, SELECT, INSERT, TRUNCATE, UPDATE, REFERENCES ON TABLE billing.Wallet TO my_user;

    create table if not exists billing.Transactions(
      "Id" UUID primary key,
      "UserId" UUID not null,
      "Amount" decimal(12,2) not null,
      "OldBalance" decimal(12,2) not null,
      "NewBalance" decimal(12,2) not null,
      "Timestamp" timestamp not null,
      "Info" character varying
    );

    grant TRIGGER, DELETE, SELECT, INSERT, TRUNCATE, UPDATE, REFERENCES ON TABLE billing.Transactions TO my_user;

    create table if not exists billing.OrderPayment(
      "OrderNumber" bigint primary key,
      "Timestamp" timestamp not null,
      "Status" character varying
    );

    GRANT TRIGGER, DELETE, SELECT, INSERT, TRUNCATE, UPDATE, REFERENCES ON TABLE billing.OrderPayment TO my_user;

    create schema if not exists "erp";

    create table if not exists "erp"."Products"(
      "Code" character varying primary key,
      "Name" character varying not null,
      "Price" decimal(12,2) not null,
      "Stock" bigint not null default 0
    );

    GRANT TRIGGER, DELETE, SELECT, INSERT, TRUNCATE, UPDATE, REFERENCES ON TABLE "erp"."Products" TO my_user;

    insert into "erp"."Products"("Code", "Name", "Price", "Stock") values ('1', 'Printer Xerox Phaser 3610', 50, 100);
    insert into "erp"."Products"("Code", "Name", "Price", "Stock") values ('2', 'Cartrige for Xerox Phaser 3610', 10, 0);
    insert into "erp"."Products"("Code", "Name", "Price", "Stock") values ('3', 'Volvo XC90', 25123, 10);

    create table if not exists "erp"."Reservations"(
      "Number" serial primary key,
      "OrderNumber" character varying not null,
      "ProductCode" character varying not null,
      "Quantity" bigint not null default 0,
      "Status" character varying not null,
      "CreatedAt" timestamp not null,
      "UpdatedAt" timestamp
    );

    GRANT TRIGGER, DELETE, SELECT, INSERT, TRUNCATE, UPDATE, REFERENCES ON TABLE "erp"."Reservations" TO my_user;

